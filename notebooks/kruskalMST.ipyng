class MinPQ:
    def __init__(self):
        self.pq = []

    def isEmpty(self):
        return len(self.pq) == 0

    def size(self):
        return len(self.pq)

    def insert(self, item):
        self.pq.append(item)
        self.pq.sort(key=lambda x: x.weight)

    def delMin(self):
        if self.isEmpty():
            return None
        return self.pq.pop(0)


class WeightedQuickUnionPC:
    def __init__(self, n):
        self.parent = list(range(n))
        self.size = [1] * n

    def find(self, p):
        while p != self.parent[p]:
            self.parent[p] = self.parent[self.parent[p]]
            p = self.parent[p]
        return p

    def connected(self, p, q):
        return self.find(p) == self.find(q)

    def union(self, p, q):
        root_p = self.find(p)
        root_q = self.find(q)
        if root_p == root_q:
            return
        if self.size[root_p] < self.size[root_q]:
            self.parent[root_p] = root_q
            self.size[root_q] += self.size[root_p]
        else:
            self.parent[root_q] = root_p
            self.size[root_p] += self.size[root_q]


class Edge:
    def __init__(self, v, w, weight):
        self.v = v
        self.w = w
        self.weight = weight

    def either(self):
        return self.v

    def other(self, vertex):
        if vertex == self.v:
            return self.w
        return self.v

    def compareTo(self, other):
        return self.weight - other.weight


class EdgeWeightedGraph:
    def __init__(self, V):
        self.V = V
        self.adj = [[] for _ in range(V)]

    def addEdge(self, edge):
        v = edge.either()
        w = edge.other(v)
        self.adj[v].append(edge)
        self.adj[w].append(edge)

    def edges(self):
        edges = []
        for v in range(self.V):
            for edge in self.adj[v]:
                if edge.other(v) > v:
                    edges.append(edge)
        return edges


class KruskalMST:
    def __init__(self, G):
        self.mst = []
        pq = MinPQ()
        for e in G.edges():
            pq.insert(e)
        uf = WeightedQuickUnionPC(G.V)
        while not pq.isEmpty() and len(self.mst) < G.V - 1:
            e = pq.delMin()
            v = e.either()
            w = e.other(v)
            if not uf.connected(v, w):
                uf.union(v, w)
                self.mst.append(e)
    def printMST(self):
        total_weight = 0
        for edge in self.mst:
            v = edge.either()
            w = edge.other(v)
            weight = edge.weight
            print(f"{v} -- {w} \t{weight}")
            total_weight += weight
        print(f"Total weight of the minimum spanning tree: {total_weight}")



# Example usage
V = 5  # Number of vertices
graph = EdgeWeightedGraph(V)

# Add edges to the graph
graph.addEdge(Edge(0, 1, 2))
graph.addEdge(Edge(0, 3, 6))
graph.addEdge(Edge(1, 2, 3))
graph.addEdge(Edge(1, 3, 8))
graph.addEdge(Edge(1, 4, 5))
graph.addEdge(Edge(2, 4, 7))
graph.addEdge(Edge(3, 4, 9))


# Create Kruskal's MST object and find the minimum spanning tree
mst = KruskalMST(graph)
mst.printMST()
